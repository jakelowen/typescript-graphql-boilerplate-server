# the basic type definition
type Team {
  id: String!
  name: String!
}
# all the ways we want to filter these.
# Uses filterQuery snippets
input TeamWhereInput {
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]

  id_is: String
  id_not: String
  id_in: [String!]
  id_notin: [String!]
  id_lt: String
  id_lte: String
  id_gt: String
  id_gte: String
  id_contains: String
  id_notcontains: String
  id_startswith: String
  id_notstartswith: String
  id_endswith: String
  id_notendswith: String

  name_is: String
  name_not: String
  name_in: [String!]
  name_notin: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_notcontains: String
  name_startswith: String
  name_notstartswith: String
  name_endswith: String
  name_notendswith: String
}
# usually just the types unique identifier
# used when grabbing only a single item
input TeamWhereUniqueInput {
  id: String!
}
# generic for ordering
input TeamOrdering {
  sort: TeamSort!
  direction: Direction! = ASC
}
# the fields we want to allow sort by
enum TeamSort {
  name
}
# generic results type
type TeamsResults {
  error: [Error!]
  items: [Team!]
  pageInfo: PageInfo
}

type TeamResult {
  error: [Error!]
  team: Team
}

input CreateTeamInput {
  name: String!
}

type CreateTeamResult {
  error: [Error!]
  team: Team
}

input UpdateTeamInput {
  id: String!
  name: String
}

type UpdateTeamResult {
  error: [Error!]
  team: Team
}

input DeleteTeamInput {
  id: String!
}

type DeleteTeamResult {
  error: [Error!]
  team: Team
}

input TeamsInput {
  where: TeamWhereInput
  orderBy: [TeamOrdering!]
  limit: Int
  after: String
  ttl: Int
}

input TeamInput {
  where: TeamWhereUniqueInput!
}

type Query {
  teams(input: TeamsInput): TeamsResults!
  team(input: TeamInput): TeamResult!
}

type Mutation {
  createTeam(input: CreateTeamInput!): CreateTeamResult!
  updateTeam(input: UpdateTeamInput!): UpdateTeamResult!
  deleteTeam(input: DeleteTeamInput!): DeleteTeamResult!
}
